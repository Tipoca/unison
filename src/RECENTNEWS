CHANGES FROM VERSION 2.29.2

* Automatically supply "user@" in argument to external copy program.


-------------------------------
CHANGES FROM VERSION 2.29.1

Follow maxthreads preference when transferring directories.
-------------------------------
CHANGES FROM VERSION 2.29.0

This version introduces some pretty big changes, by BCP in
collaboration with Alan Schmitt.  We've tested them minimally, but
this version should be considered "only for the adventurous" for the
moment.

* Added some more debugging code to remote.ml to give more informative
  error messages when we encounter the (dreaded and longstanding)
  "assert failed during file transfer" bug

* Experimental support for invoking an external file transfer tool for
  whole-file copies instead of Unison's built-in transfer protocol.  

  Two new preferences have been added:

    - copyprog is a string giving the name (and command-line switches,
      if needed) of an external program that can be used to copy large
      files efficiently.  By default, rsync is invoked, but other
      tools such as scp can be used instead by changing the value of
      this preference.  (Although this is not its primary purpose,
      rsync is actually a pretty fast way of copying files that don't
      already exist on the receiving host.)  For files that do already
      exist on (but that have been changed in one replica), Unison
      will always use its built-in implementation of the rsync
      algorithm.

    - copythreshold is an integer (-1 by default), indicating above
      what filesize (in megabytes) Unison should use the external
      copying utility specified by copyprog.  Specifying 0 will cause
      ALL copies to use the external program; a negative number will
      prevent any files from using it.  (Default is -1.)

* If Unison is interrupted during a directory transfer, it will now
  leave the partially transferred directory intact in a temporary
  location. (This maintains the invariant that new files/directories
  are transferred either completely or not at all.)  The next time
  Unison is run, it will continue filling in this temporary directory,
  skipping transferring files that it finds are already there.  


-------------------------------
CHANGES FROM VERSION 2.28.51

* Propagating changes from 2.27 branch


-------------------------------
CHANGES FROM VERSION 2.28.51

* Propagating changes from 2.27 branch


-------------------------------
CHANGES FROM VERSION 2.28.45

* Unison can sometimes fail to transfer a file, giving the unhelpful
  message "Destination updated during synchronization" even though the
  file has not been changed.  This can be caused by programs that
  change either the file's contents *or* the file's extended
  attributes without changing its modification time.  I'm not sure
  what is the best fix for this -- it is not Unison's fault, but it
  makes Unison's behavior puzzling -- but at least Unison can be more
  helpful about suggesting a workaround (running once with 'fastcheck'
  set to false).  The failure message has been changed to give this
  advice.

* Upgraded to GPL version 3 and added copyright notice to
  documentation files.

-------------------------------
CHANGES FROM VERSION 2.28.36

* Transfer changes from 2.27 branch

-------------------------------
-------------------------------
CHANGES FROM VERSION 2.28.29

* Propagage changes from 2.27 branch.


-------------------------------
CHANGES FROM VERSION 2.28.23

* Small improvement to error message when no archive files are
  found (thanks to Norman Ramsey).

* Patch from Karl M for GTK2 UI:
     1) reverts the problematic (when no profile is used)
        reloadProfile on the restart button.
     2) it adds a reloadProfile call after the detectCmd for
        rescanning unsynchronized items.
     3) it turns off confirmBigDeletes on a rescan and checks it
        before issuing a warning popup.
     4) it adjusts the status results width so that everything fits.

-------------------------------
CHANGES FROM VERSION 2.28.17

* Applying a patch from Karl M to make the Restart button reload the
  profile in the uigtk2 UI.

* Fixed a bug in the merge code (new archive was not being backed up).
  Minor improvements to the merge code to make it say more about what
  it's doing and why.


-------------------------------
CHANGES FROM VERSION 2.28.16

More Mac UI improvements
* Revert the combo ProgressIndicator / status message (couldn't get the flicker to go away...)
* Improved file change icons
    - Lighter color / slight gradient wash
    - Icons for Absent (opposite side of an add) and Unmodified (opposite side of a one sided change) -- these give the line balance
* Display panel for errors occuring during Connecting... phase

-------------------------------
CHANGES FROM VERSION 2.28.15

Test commit.

-------------------------------
CHANGES FROM VERSION 2.28.13

* Roll back non-fix for GTK2 UI

-------------------------------
CHANGES FROM VERSION 2.28.11

* Added some files left out of the previous commit.

* Fix for GTK2 UI, suggested by Karl M

-------------------------------
CHANGES FROM VERSION 2.28.9

* More Mac GUI goodness from Craig.

Enhancements:
    - Default table layout is now outline view (middle choice in outline control)
    - Outline layout initial does "smart expand" to open one screen full
    - Action icons - Lighter parent icons
    - Icons for Left / Right work (Added, Modified, Deleted)

Bug Fixes:
    - Fix problem with file Details not showing
    - Sort by Action not working
    - Missing status for some items (on right)
    - Reset view contents (clear recon items) when re-syncing
    - Action icons -- Fix upside-down question mark
    - Fix centering of "Connecting..." message when panel is resized
    - Force to progress to 100% when done

Known Issues:

1) The most controversial "enhancement" here is the replacement of the
   text for Left / Right (e.g. "Modified", "Deleted") with more
   compact / colorful icons.  These icons are perhaps was too "loud",
   but Craig thinks that if he can tone them down a bit that this will
   be an improvement.  [Actually, I like them pretty well as-is.]

   Any icon artists out there?

2) The rendering of the status message in the main ProgressIndicator
   is currently leading to flicker.

-------------------------------
CHANGES FROM VERSION 2.28.8

* Some more files needed for Craig's updated Mac GUI.

-------------------------------
CHANGES FROM VERSION 2.28.6

* More improvements to the OSX GUI from Craig Federighi, including a very 
  nice new "nested directory" display style and per-file progress bars.  Any
  unison hackers using Macs are invited to check out the new UI and post
  any bugs or suggestions for improvement to the unison-hackers list.

  (There is one known issue that sometimes causes the list of changes to be 
  redisplayed incorrectly after an Ignore command.)

-------------------------------
CHANGES FROM VERSION 2.28.5

* Add couple of missing files.


-------------------------------
CHANGES FROM VERSION 2.28.4

* Apply experimental patch from Craig Federighi, which seems to fix
  the deadlocks and crashes in new OSX UI.  (Actually, this is a major
  rewrite and cleanup of the whole Cocoa UI.)  Thanks, Craig!!!

  It would be great if some Mac users could help stress-test this fix.

-------------------------------
CHANGES FROM VERSION 2.28.4

* Apply experimental patch from Craig Federighi, which seems to fix
  the deadlocks and crashes in new OSX UI.  (Actually, this is a major
  rewrite and cleanup of the whole Cocoa UI.)  Thanks, Craig!!!

  It would be great if some Mac users could help stress-test this fix.

-------------------------------
CHANGES FROM VERSION 2.28.3

* Another fix to ctime (non-)handling

-------------------------------
CHANGES FROM VERSION 2.28.1

* Small fix to ctime (non-)handling in update detection under windows
  with fastcheck.  This *might* fix the bug that Karl M. has reported.  
  (Copying fix into trunk.)


-------------------------------
CHANGES FROM VERSION 2.28.-2

* Very preliminary support for triggering Unison from an external 
  filesystem-watching utility.  The current implementation is very
  simple, not efficient, and almost completely untested.  Not ready 
  for real users.  But if someone wants to help me improve it (e.g.,
  by writing a filesystem watcher for your favorite OS), please let
  me know.

  On the Unison side, the new behavior is incredibly simple:
    - use the text UI 
    - start Unison with the command-line flag "-repeat FOO", 
      where FOO is name of a file where Unison should look 
      for notifications of changes
    - when it starts up, Unison will read the whole contents 
      of this file (on both hosts), which should be a 
      newline-separated list of paths (relative to the root 
      of the synchronization) and synchronize just these paths, 
      as if it had been started with the "-path=xxx" option for 
      each one of them
    - when it finishes, it will sleep for a few seconds and then
      examine the watchfile again; if anything has been added, it
      will read the new paths, synchronize them, and go back to 
      sleep
    - that's it!

  To use this to drive Unison "incrementally," just start it in 
  this mode and start up a tool (on each host) to watch for
  new changes to the filesystem and append the appropriate paths
  to the watchfile.  Hopefully such tools should not be too hard
  to write.

  Since I'm an OSX user, I'm particularly interested in writing a 
  watcher tool for this platform.  If anybody knows about 
  programming against the Spotlight API and can give me a hand, 
  that would be much appreciated.

-------------------------------
