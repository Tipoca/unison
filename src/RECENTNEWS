CHANGES FROM VERSION 2.44.0

* Small patch from Stephane Glondu to make Unison compile with Ocaml 3.12.

* New version of uigtk2.ml from Matt Zagrabelny that reorganizes the
  icons in a slightly more intuitive way.

* Finished implementing the "fastercheckUNSAFE" option, which can be
  used (with care!) to achieve *much* faster update detection when all
  the common files in the two replicas are known to be identical.  See
  the documentation for more information.

  This feature should still be considered experimental, but it's ready
  for other people to try out.

-------------------------------
CHANGES FROM VERSION 2.43.12

* Small patch from Stephane Glondu to make Unison compile with Ocaml 3.12.

* New version of uigtk2.ml from Matt Zagrabelny that reorganizes the
  icons in a slightly more intuitive way.

* Incorporated new version of fsmonitor.py from Christophe Gohle

-------------------------------
CHANGES FROM VERSION 2.43.10

* Fixed incompatibility with OpenSSH 5.6.

-------------------------------
CHANGES FROM VERSION 2.43.7

* Fixed fingerprint cache: do not cache file properties
* Fixed O_APPEND mode for open under Windows (the previous attempt in
  revision 422 was incomplete)
* Fixed String.sub invalid argument error when an AppleDouble file does
  not contain a finder information field

-------------------------------
CHANGES FROM VERSION 2.43.6

* A small fix suggested by Jerome.  Still thinking about what needs to
  chance to get newly created files to transfer without failing.

-------------------------------
CHANGES FROM VERSION 2.43.0

* See if we can get revisionString to update automatically now...


-------------------------------
CHANGES FROM VERSION 2.43.0

* Bump revisionString -- not sure why this isn't happening automatically.

-------------------------------
CHANGES FROM VERSION 2.43.-30

* Experimental implementation of a new "faster check" mode for update
  detection.  When this mode is enabled (by running with
  'fastercheckUNSAFE=true'), Unison will skip calculating fingerprints
  of the contents of files that it has not seen before -- it just uses
  the file's size as a pseudo-fingerprint, allowing the archives to be
  built very quickly.  

  This feature has not been extensively tested -- if you use it on
  live replicas, please pay careful attention to what Unison is doing.
  Also, note that the cost of faster update detection is that it is
  possible Unison will miss a conflict; this flag should be used only
  when the replicas are known to be identical.

  Here's the full documentation.  

let fastercheckUNSAFE =
  Prefs.createBool "fastercheckUNSAFE"
    false "!skip computing fingerprints for new files (experts only!)"
    (  "THIS FEATURE IS STILL EXPERIMENTAL AND SHOULD BE USED WITH EXTREME CAUTION.  "
       ^ "\n\n"
       ^ "When this flag is set to {\\tt true}, Unison will compute a 'pseudo-" 
       ^ "fingerprint' the first time it sees a file (either because the file is "
       ^ "new or because Unison is running for the first time).  This enormously "
       ^ "speeds update detection, but it must be used with care, as it can cause "
       ^ "Unison to miss conflicts: If "
       ^ "a given path in the filesystem contains files on {\\em both} sides that "
       ^ "Unison has not yet seen, and if those files have the same length but different "
       ^ "contents, then Unison will not notice the presence of a conflict.  If, later, one "
       ^ "of the files is changed, the changed file will be propagated, overwriting  "
       ^ "the other.  "
       ^ "\n\n"
       ^ "Moreover, even when the files are initially identical, setting this flag can lead "
       ^ "to potentially confusing behavior: "
       ^ "if a newly created file is later touched without being modified, Unison will "
       ^ "treat this "
       ^ "conservatively as a potential change (since it has no record of the earlier "
       ^ "contents) and show it as needing to be propagated to the other replica. "
       ^ "\n\n"
       ^ "Most users should leave this flag off -- the small time savings of not "
       ^ "fingerprinting new files is not worth the cost in terms of safety.  However, "
       ^ "it can be very useful for power users with huge replicas that are known to "
       ^ "be already synchronized (e.g., because one replica is a newly created duplicate "
       ^ "of the other, or because they have previously been synchronized with Unison but "
       ^ "Unison's archives need to be rebuilt).  In such situations, it is recommended "
       ^ "that this flag be set only for the initial run of Unison, so that new archives "
       ^ "can be created quickly, and then turned off for normal use.")

-------------------------------
CHANGES FROM VERSION 2.43.-29

* Added support for "pseudo-fingerprints", as a first step to
  implementing super-fast initial scans, following recent discussion
  on the unison-hackers list

-------------------------------
CHANGES FROM VERSION 2.42.-29

* Small patch from Stephane Glondu to make Unison compile with Ocaml 3.12.


-------------------------------
CHANGES FROM VERSION 2.41.-27

* Try again to fix version number





-------------------------------
CHANGES FROM VERSION 2.41.-27

* Fix version number





-------------------------------
CHANGES FROM VERSION 2.41.-28

* Trim duplicate paths when using "-repeat watch"

* Bump version number, since protocol has changed (should have done
  this a few commits ago)





-------------------------------
CHANGES FROM VERSION 2.40.16

* Correct a bug in the watcher startup code for remote sync





-------------------------------
CHANGES FROM VERSION 2.40.16

* Unison now passes path arguments and --follow directives to
  fsmonitor.py.  This seems to work except for one small issue with
  how fsmonitor.py treats --follow directives for directories that
  don't exist (or maybe this is an issue with how it treats any kind
  of monitoring when the thing being monitored doesn't exist?).  If I
  create a symlink to a nonexistant directory, give Unison (hence
  fsmonitor.py) a 'follow' directive for the symlink, start unison, and
  *then* create the directory, fsmonitor.py misses the change.





-------------------------------
CHANGES FROM VERSION 2.40.16

* More progress on file watching
* Add external fsmonitor.py script to svn repo

* If you want to play with the filewatching functionality, here's 
  what you do: 
    - add fsmonitor.py to your search path (or make a symlink to 
      it from somewhere on your search path) on both machines that 
      you're going to synchronize
    - recompile the text ui ('make text') on both machines
    - start unison with "-repeat watch" on the command line


-------------------------------
CHANGES FROM VERSION 2.40.16

* Progress on filesystem watching (see uitext.ml)

* Update copyright dates, while I'm thinking about it :-)





-------------------------------
CHANGES FROM VERSION 2.40.16

* Progress on filesystem watching (see uitext.ml)

* Update copyright dates, while I'm thinking about it :-)





-------------------------------
CHANGES FROM VERSION 2.40.16

* One more fix to Unicode case sensitive mode

-------------------------------
CHANGES FROM VERSION 2.40.16

Lines added in profile files by unison always start at a new line

-------------------------------
CHANGES FROM VERSION 2.40.16

* Fix to Unicode case sensitive mode (call the right function for
  comparing file names).
* "prefer = older/newer" now propagates deletions when there is no
  conflict

-------------------------------
CHANGES FROM VERSION 2.40.16

* Fixed Unicode decomposition tables

-------------------------------
CHANGES FROM VERSION 2.40.16

Move old 2.40 branch aside to make room for a new beta version with
same major number
-------------------------------
CHANGES FROM VERSION 2.40.16

Update documentation

-------------------------------
