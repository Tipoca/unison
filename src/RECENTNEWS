CHANGES FROM VERSION 2.36.-27

* Performance improvement in Xferhint module.
  Update this cache more accurately during transport.

-------------------------------
CHANGES FROM VERSION 2.36.-27

* Correction to previous fix: do not perform the optimization for
  directories with ignored children *in the archive*. (The previous
  fix was also rejecting directories with ignored children on disk,
  which is way too conservative.)

-------------------------------
CHANGES FROM VERSION 2.36.-27

* Fixed small bug in new update detection optimization:
  do not perform the optimization for directories with ignored
  children in the archive.  Indeed, we cannot rely on the archive in
  this case instead of reading the directory contents from the
  filesystem (systematically pruning the ignored children from the
  archive is too costly).

-------------------------------
CHANGES FROM VERSION 2.36.-27

* Experimental update detection optimization:
  do not read the contents of unchanged directories
* MyMap.map and MyMap.mapi now iterate in increasing order
  (rather than in an unspecified way)

-------------------------------
CHANGES FROM VERSION 2.36.-27

* GTK UI: disabled scrolling to the first unfinished item during transport.
  It goes way too fast when lot of small files are synchronized, and it
  makes it impossible to browse the file list during transport.
* Fixed computation of the amount of data to transfer: property updates
  should count for zero.
* Mac GUI: use Unicode.protect to ensure that all string displayed are
  encoded in UTF-8.
* In Unicode case-insensitive mode, use filenames in NFC normal form
  when tranferring files
* Added a property list at the end of the archive file.  This is a
  better way to extend the format than the hack currently used to
  store the case-sensitivity mode.

-------------------------------
CHANGES FROM VERSION 2.36.-27

* When a file transfer fails, turn off fastcheck for this file on the
  next sync.
* Limit the number of simultaneous transfer using rsync
  (as the rsync algorithm can use a large amount of memory when
   processing huge files)
* Raise the number of concurrent threads, as there is not much reason
  to leave it low anymore.

-------------------------------
CHANGES FROM VERSION 2.36.-27

* Clean-up in remote.ml
* Dead-lock free flow control mechanism

-------------------------------
CHANGES FROM VERSION 2.36.-27

* Fixed bug with case insensitive mode on a case sensitive filesystem:
  - if file "a/a" is created on one replica and directory "A" is
    created on the other, the file failed to be synchronized the first
    time Unison is run afterwards, as Unison uses the wrong path "a/a"
    (if Unison is run again, the directories are in the archive, so
     the right path is used);
  - if file "a" appears on one replica and file "A" appears on the
    other with a different contents, Unison was unable to synchronized
    them.

-------------------------------
CHANGES FROM VERSION 2.36.-27

* Accurate computation of the amount of data to transfer
* Accurate update of the amount of data transferred, including:
  - when transferring by copying on the remote host
  - when the file was already transferred to the remote host
  - in case of errors
* Text UI: list partially transferred directories in transfer summary
  and use appropriate exit code (indicating that some files were skipped)
* Improved error reporting when the destination is updated during
  synchronization: Unison now tells which file has been updated, and how.
* Fix include directive failure when the line ends by CRLF
  (the CR was not removed)
* Limit the length of temporary file names
* Ignore errors when writing to the log file
* Mac UI: some performance improvements
* GTK UI: possibility to display errors in auxiliary detail window +
  other small changes
* Save archive after update detection when there is no archive on disk yet
* GTK UI: Made restart work also when roots are given from the command line

-------------------------------
CHANGES FROM VERSION 2.36.-27

* Allow partial transfer of a directory when there was an error deep
  inside this directory during update detection.  At the moment, this
  is only activated with the text and GTK UIs, which have been
  modified so that they show that the transfer is going to be partial
  and so that they can display all errors.
* Changed types Common.replicaContent and Common.replicas to use
  records rather than tuples, as this is more readable and easier to
  extend.

-------------------------------
CHANGES FROM VERSION 2.36.-27

* Bumped version number: incompatible protocol changes

* Partial transfer of directories.  If an error occurs while
  transferring a directory, the part transferred so far is copied into
  place (and the archives are updated accordingly).
  The "maxerrors" preference controls how many transfer error Unison
  will accept before stopping the transfer of a directory (by default,
  only one).  This makes it possible to transfer most of a directory
  even if there are some errors.  Currently, only the first error is
  reported by the GUIs.
* Save a copy of a failed transfer only when the source file is
  unchanged.
* Function Trace.log is not called anymore from Copy.tryCopyMovedFile
  as Trace.log performs a callback to the client inside a Lwt_unix.run
  event loop, which introduces spurious synchronization between
  threads.  Instead, the function returns a message which is sent back
  to the client.
* Code reorganization in files.ml/update.ml to minimize the number of
  network roundtrips.

-------------------------------
CHANGES FROM VERSION 2.35.-17

* Various small changes

-------------------------------
CHANGES FROM VERSION 2.35.-17

* Use a better file name for keeping a copy of an incorrectly
  transferred file.  In particular, this is now a temp filename, and
  Unison will not try to propagate it next time it is run.
* In function Stasher.backup, use Fspath.findWorkingDir to find the
  right file to rename or delete, possibly following symlinks.
* Uigtk2: relabelled "Restart" button to "Rescan"
* Uigtk2: performance improvements
* Don't get the home directory from environment variable HOME under
  Windows (except for Cygwin binaries): we don't want the behavior of
  Unison to depends on whether it is run from a Cygwin shell (where
  HOME is set) or in any other way (where HOME is usually not set).
* Unicode normalization: put characters in canonical order
* Fixed recently introduced bug in Update.postCommitArchive
* Uicommon: always reparse the command line when loading a profile
  (not just the first time)

-------------------------------
CHANGES FROM VERSION 2.35.-17

* Properly deals with non-conformant AppleDouble files produced by Mac
  OS X; for compatibility, produce AppleDouble files with the same
  structure as the one produced by Mac OS X.
* Fixed a bug that resulted in Unison missing ressource fork changes
* Windows Unicode API: use hard links when available when commiting
  the archive to disk

-------------------------------
CHANGES FROM VERSION 2.35.-17

* Fixed bug introduced during file transfer cleanup that could lead to
  uncaught exceptions
* Simplified function validate in myMap.ml
* Mac OS: do not check filler contents in Apple Double files
  (the spec says it should be all zeroes, but Mac OS sets it to
   "Mac OS X        "...)
* Use a hard link rather than a copy when possible for creating the
  MainArch-files in Update.postCommitArchive
* Remove duplicate calls to Stasher.stashCurrentVersion in update.ml
  (as well as now unnecessary calls to Update.updateArchive in files.ml)

-------------------------------
CHANGES FROM VERSION 2.35.-17

* Fixed bug resulting in slow performances when transferring a file
  using our rsync implementation from a 64-bit architecture to a
  32-bit architecture.

-------------------------------
CHANGES FROM VERSION 2.35.-17

* Bumped minor version: many incompatible protocol changes

* Message lengths are checksummed to guard against protocol corruption
  (no more [Invalid_argument "String.create"])

* Experimental streaming protocol for transferring file contents (can
  be disabled by setting the directive "stream" to false): file
  contents is transfered asynchronously (without waiting for a response
  from the destination after each chunk sent) rather than using the
  synchronous RPC mechanism.  As a consequence:
  - Unison now transfers the contents of a single file at a time
    (Unison used to transfer several contents simultaneously in order
    to hide the connection latency.)
  - the transfer of large files uses the full available bandwidth
    and is not slowed done due to the connection latency anymore
  - we get performance improvement for small files as well by
    scheduling many files simultaneously (as scheduling a file for
    transfer consume little ressource: it does not mean allocating a
    large buffer anymore)

* Improvement to the code for resuming directory transfers:
  - if a file was not correctly transferred (or the source has been
    modified since, with unchanged size), Unison performs a new
    transfer rather than failing
  - spurious files are deleted (this can happen if a file is deleted
    on the source replica before resuming the transfer; not deleting
    the file would result in it reappearing on the target replica)

* More file transfer implementation cleanup.  In particular, the
  "paranoid check" (checking whether the file has been correctly
  transferred) is moved to copy.ml.  This way, one can avoid computing
  a file fingerprint twice when a file is already transferred, and
  when using the "transfer by copying" optimization.
  The check of the source file is also moved to copy.ml, so if the
  paranoid check fails, we can tell whether this is due to the source
  file being modified.

-------------------------------
CHANGES FROM VERSION 2.34.0

* Improvement to the code for resuming directory transfers:
  - make sure file information (permissions, ...) has been properly set
    when using a previously transferred temp file
  - make sure previously transferred directories are writable
* Some cleanup in file transfer implementation
* Got rid of all occurrences of "try ... with _ -> ..."
* Removed ctime field from Fileinfo.t
* Fixed bug in Lwt_unix.run which could make it fail with a Not_found
  exception

-------------------------------
CHANGES FROM VERSION 2.34.0

* Fix to the Mac GUI: the bigarray library is now required
-------------------------------
CHANGES FROM VERSION 2.34.0

* Case sensitivity information put in the archive (in a backward
  compatible way) and checked when the archive is loaded

-------------------------------
CHANGES FROM VERSION 2.34.0

* Fixed quotation of paths and names when writing to a preference file
* Workaround for bug in new "select" implementation in Ocaml 3.11
  (select fails with EPIPE error when monitoring a remotely closed
   file descriptor)

-------------------------------
CHANGES FROM VERSION 2.34.0

* Windows Unicode API: when a file cannot be renamed due to a sharing
  violation error or an access denied error, retry for up to 1 second,
  in case the file is temporarily opened by an indexer or an anti-virus.

-------------------------------
CHANGES FROM VERSION 2.34.0

* Text UI: during update detection, display status by updating a
  single line rather than generating a new line of output every so
  often.  That should be less confusing.
* Text UI: in repeat mode, don't save the archives when there is no
  update.  Indeed, in this mode, we should minimize the amount of work
  performed and it is unlikely that the archives have changed much.

-------------------------------
CHANGES FROM VERSION 2.34.0

* Got rid of the 16MiB marshalling limit by marshalling to a bigarray

-------------------------------
CHANGES FROM VERSION 2.34.0

* Use system dependant API for spawning processes.
  (Unicode API under Windows.)
* Fixed the bug with ssh not working when running unison from a cygwin
  shell.
* Move [protect] function (which converts a string to UTF-8 by keeping
  all UTF-8 characters unchanged and considering all other characters
  as ISO 8859-1 characters) from uigtk2.ml to unicode.ml, as it may be
  useful for the other UIs.

-------------------------------
CHANGES FROM VERSION 2.34.0

* Small documentation fix suggested by mszsummer.




-------------------------------
CHANGES FROM VERSION 2.34.0

* Cleaned-up the Unicode selection logic
-------------------------------
CHANGES FROM VERSION 2.34.0

* Bumped minor version: incompatible protocol changes
* The use of the Windows Unicode API is now controlled via the
  "unicode" directive
* Fixed bug in GTK UI: buttons could be incorrectly reenabled during
  synchronization
* Improved error message when trying to synchronize a symlink to a
  Windows machine
* Fixed compilation warnings in lwt_unix.ml and pty.c
* Added some missing convertUnixErrorsToTransient

-------------------------------
CHANGES FROM VERSION 2.33.2

* Small documentation fix suggested by mszsummer.




-------------------------------
CHANGES FROM VERSION 2.33.2

* Added an abstraction layer over Unix/Sys modules in order to be able
  to redefine all system calls involving filenames
* Implemented corresponding bindings for the Windows Unicode API
  (not activated by default yet)
* Uses improved emulation of "select" call provided by Ocaml 3.11
  under Windows (the GUI should not freeze as much during synchronization)

-------------------------------
CHANGES FROM VERSION 2.33.2

* Fixed predicate matching in Unicode case-insensitive mode

-------------------------------
CHANGES FROM VERSION 2.33.2

* Improved error messages when rejecting non-unicode encoded file names
* uigtk2: fixed the code for transcoding from Windows Codepage 1252 to
  UTF-8 (for some reason, I mistakenly took a table corresponding to
  Codepage 1250 instead)
* Windows: added icons with transparency

-------------------------------
CHANGES FROM VERSION 2.33.2

* Incorporate Makefile improvements from Martin von Gagern

-------------------------------
CHANGES FROM VERSION 2.33.1

* Incorporate recent change from 2.32 branch.


-------------------------------
CHANGES FROM VERSION 2.33.-4

* Updated list of bad Windows file names following the MSDN
  documentation (in particular, files with trailing dots are now
  rejected when synchronizing with a Windows machine)
* Experimental Unicode-aware case insensitive mode.  It is activated
  when the preference "unicode" is set to true and Unison is in
  case-insensitive mode.
* Bumped version number to reflect the newly added preference

-------------------------------
CHANGES FROM VERSION 2.32.7

* Move descriptions of recent changes to documentation.


-------------------------------
